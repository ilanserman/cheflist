const config = require('../config');
const { MongoClient } = require("mongodb");

const mongoClient = new MongoClient(config.mongoUrl);

const upsertChangeStream = async function getUpsertChangeStream() {
  //const resumeToken = await getResumetoken("SOME_UPSERT_TOKEN_ID"); // some code which will get the token from database.
  console.log("resumeToken", resumeToken);
  const collection = mongoClient.getCollection("products");
  const changeStream = collection.watch([
    {
      "$match": {
        "operationType": {
          "$in": ["insert", "update", "replace"]
        }
      }
    },
    {
      "$project": {
        "documentKey": false
      }
    }
  ], {"resumeAfter": resumeToken, "fullDocument": "updateLookup"});

  return changeStream;
};
upsertChangeStream.on('change', async change => {
  console.log("Pushing data to elasticsearch with id", change.fullDocument._id);
  change.fullDocument.id = change.fullDocument._id;
  Reflect.deleteProperty(change.fullDocument, "_id");
  const response = await client.index({
    "id": change.fullDocument.id,
    "index": "someindex",
    "body": change.fullDocument,
    "type": "doc"
  });
  console.log("document upserted successsfully with status code", response.statusCode);
  await saveResumeTaken(change._id, "SOME_UPSERT_TOKEN_ID"); // This is where are saving the token
});

upsertChangeStream.on("error", error => {
  console.error(error);
});

const deleteChangeStream = async function getDeleteChangeStream() {
  const resumeToken = await getResumetoken("SOME_DELETE_TOKEN_ID");
  console.log("resumeToken", resumeToken);
  const changeStream = (await mongoClient.getCollection("somecollection")).watch([
    {
      "$match": {
        "operationType": {
          "$in": ["delete"]
        }
      }
    },
    {
      "$project": {
        "documentKey": true
      }
    }
  ], {"resumeAfter": resumeToken});

  return changeStream;
}
deleteChangeStream.on("change", async change => {
  console.log("Deleting data from elasticsearch with id", change.documentKey._id);
  const response = await client.delete({
    "id": change.documentKey._id,
    "index": "someindex",
    "type": "doc"
  });
  console.log("document deleted successsfully with status code", response.statusCode);
  await saveResumeTaken(change._id, "SOME_DELETE_TOKEN_ID"); // This is where are saving the token
});

deleteChangeStream.on("error", error => {
  console.error(error);
});

async function getResumetoken(id) {
  console.log("Getting resume token", {id});
  const tokensCollection = await mongoClient.getCollection("tokens");
  const result = await tokensCollection.findOne({"_id": id});
  return result ? result.resumeToken : null;
}

async function saveResumeTaken(resumeToken, id) {
  console.log("Saving resume token");
  const tokensCollection = await getCollection("tokens");
  return tokensCollection.updateOne(
    {"_id": id},
    {"$set": {resumeToken, "lastModifiedDate": new Date()}},
    {"upsert": true}
  );
}
